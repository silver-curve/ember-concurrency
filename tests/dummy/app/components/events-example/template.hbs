<h2>Awaiting Events / Conditions</h2>

<p>
  In addition to pausing the execution of a task until a yielded promise
  resolves, it's also possible to pause the execution of a task until
  an event fires (e.g. an Ember.Evented event like <code>didInsertElement</code>,
  or a `click` event from a DOM element or jQuery selection), or some other
  condition has been met.
</p>

<p>
  The patterns described below can be seen as alternatives to using observers
  and other patterns that are often prone to abuse; proper use of observers or
  Ember.Evented hooks often requires conditionals and defensive programming to
  ensure that the app is in some expected state before running the logic in that
  hook, which is the kind of error-prone busywork that ember-concurrency
  intends to prevent.
</p>

<p>
  By expressing event-driven code within tasks using the patterns below, you are
  already heavily constraining the conditions in which that event or observer can fire,
  which means you don't have to write nearly as much guard/cleanup logic to ensure that
  an event doesn't fire at an unexpected time/state.
</p>

<h3>Waiting for Ember & DOM / jQuery Events</h3>

<p>
  You can use <code>waitForEvent(object, eventName)</code> to pause your task until
  an Ember.Evented or DOM / jQuery Event fires.
  <code>object</code> must include Ember.Evented (or support <code>.one()</code>
  and <code>.off()</code>) or be a valid DOM EventTarget (or support
  <code>.addEventListener()</code> and <code>.removeEventListener()</code>).
</p>

<p>
  This is useful for when you want to dynamically wait for an event to fire
  within a task, but you don't want to have to set up a Promise that
  resolves when the event fires.
</p>

<h3>Example</h3>

<p>
  Try clicking around the page; <code>waitForEvent</code> will install
  handlers and wait for the specified Ember, DOM or jQuery event to fire;
  the value returned from <code>yield</code> is the event that was fired.
</p>

{{!BEGIN-SNIPPET waitForEvent}}
<h4>
  domEvent: (x={{domEvent.offsetX}}, y={{domEvent.offsetX}})
</h4>

<h4>
  jqueryEvent: (x={{jQueryEvent.offsetX}}, y={{jQueryEvent.offsetX}})
</h4>

<h4>
  emberEvent: (v={{emberEvent.v}})
</h4>
{{!END-SNIPPET}}

{{code-snippet name="waitForEvent.js"}}
{{code-snippet name="waitForEvent.hbs"}}

<h3>Example with Derived State</h3>

<p>
  Sometimes, it's desirable to know whether a certain part of a task
  is executing, rather than the whole task. For instance, in the example
  below, the <code>waiterLoop</code> task has an infinite loop, so
  <code>waiterLoop.isRunning</code> will always be true. If you want
  to know whether a specific part of that loop is running, then you
  can just extract some of that logic into another task and check
  if that subtask's <code>isRunning</code> property in the template.
</p>

{{!BEGIN-SNIPPET waitForEvent-derived-state}}
<h4>
  {{#if waiter.isRunning}}
    Please click somewhere...
  {{else}}
    Thanks!
  {{/if}}
</h4>
{{!END-SNIPPET}}

{{code-snippet name="waitForEvent-derived-state.js"}}
{{code-snippet name="waitForEvent-derived-state.hbs"}}

<h3>Waiting for a condition / property</h3>

<p>
  You can use <code>waitForProperty(object, property, callback)</code>
  to pause your task until a property on an Ember Object becomes a certain value.
  This can be used in a variety of use cases, including coordination execution
  between concurrent tasks.
</p>

{{!BEGIN-SNIPPET waitForProperty}}
<button onclick={{perform startAll}}>
  Start
</button>

<h4>
  State: {{state}}
</h4>
{{!END-SNIPPET}}

{{code-snippet name="waitForProperty.js"}}
{{code-snippet name="waitForProperty.hbs"}}
